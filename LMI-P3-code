/****************************************************
 * LLENAR ESTE ESPACIO CON LOS SIGUIENTES DATOS:    *
 * Nombre:			Enrique Almaraz                  *
 * Hora clase:		N2                              *
 * Día:				Lunes                           *
 * N° de lista:     3                               *
 * N° de Equipo:    1#                              *
 * Dispositivo:                                     *
 * Rev:             1.0                             *
 * Propósito de la actividad:                       *
 * Utilizar los puertos de salida del               *
 * microcontrolador junto con funciones de tiempo.  *
 *                                 Fecha: 26/10/20  *
 ***************************************************/ 
/*atmega328P PIN - OUT*/
/*       PIN - OUT
         atmega328P
	      -------                                
	PC6  |1     28| PC5                         
	PD0  |2     27| PC4                          
	PD1  |3     26| PC3                          
	PD2  |4     25| PC2                          
	PD3  |5     24| PC1
	PD4  |6     23| PC0                          
	VCC  |7     22| GND                         
	GND  |8     21| AREF                          
	PB6  |9     20| AVCC                          
	PB7  |10    19| PB5                          
	PD5  |11    18| PB4                          
	PD6  |12    17| PB3
	PD7  |13    16| PB2
	PB0  |14    15| PB1
	      --------
*/
/*atmega328P PIN FUNCTIONS*/
 /*
 atmega328P PIN FUNCTIONS
 pin   function              name    pin     function              name
 1     !RESET/PCINT14        PC6     15      PCINT1/OC1A           PB1
 2     RxD/PCINT16           PD0     16      PCINT2/OC1B/SS        PB2
 3     TxD/PCINT17           PD1     17      PCINT3/OC2A/MOSI      PB3
 4     INT0/PCINT18          PD2     18      PCINT4/MISO           PB4
 5     INT1/PCINT19/OC2B     PD3     19      PCINT5/SCK            PB5
 6     PCINT20               PD4     20      ANALOG VCC            AVCC
 7     +5v                   VCC     21      ANALOG REFERENCE      AREF
 8     GND                   GND     22      GND                   GND
 9     XTAL1/PCINT6          PB6     23      PCINT8/ADC0           PC0
 10	   XTAL2/PCINT7          PB7     24      PCINT9/ADC1           PC1
 11    PCINT21/OC0B          PD5     25      PCINT10/ADC2          PC2
 12	   PCINT22/OC0A/AIN0     PD6     26      PCINT11/ADC3          PC3
 13    PCINT23/AIN1          PD7     27      PCINT12/ADC4/SDA      PC4
 14    PCINT0/AIN1           PB0     28      PCINT13/ADC5/SCL      PC5
 */
/*******************Bibliotecas****************************/
#include <avr/io.h> //se incluyen las Bibliotecas de E/S del AVR atmega328P

/*****************Macros y constantes**********************/
#define F_CPU 1000000UL //1 Mhz

//#define _BV(bit) (1<<bit) // macro (var)
// ( recorre un 1 hasta la posición del bit) ya se encuentra en la librería
//#define bit_is_set(sfr,bit) (_SFR_BYTE(sfr) & _BV(bit))
//#define bit_is_clear(sfr,bit) (!(_SFR_BYTE(sfr) & _BV(bit)))

//Se asignan nombres a los pines a utilizar
//#define + nombre + pin o valor
//Entradas
#define Switch_1 PIND0 // PIN 2
#define Switch_2 PIND7 // PIN 13

//Salidas
#define LED_1 PINB0 
#define LED_2 PINB4	 
#define LED_3 PINC0

/***********************Funciones**************************/
/*********************Declaracion de Funciones*************/
void initialize_ports(void); // Función para inicializar por puertos

/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
	initialize_ports(); // va hacía la inicialización

//--Ejecución
	while (1)
	{
		if (((PIND &(1<< Switch_1)) == 0) && ((PIND &(1<<Switch_2)) == 0)) {
			
			PORTB &= ~(1<<LED_1); 
		}
		else{
			
			PORTB |= (1<<LED_1);
		}
		
		if(bit_is_clear(PIND,Switch_1) || (bit_is_clear(PIND,Switch_2))){
			
			PORTB |= (1<<LED_2);
		}
		else{
			
			PORTB &= ~(1<<LED_2);
		}
		
		if (((PIND &(1<< Switch_1)) == 0) != (bit_is_clear(PIND,Switch_2))) {
					
			PORTC &= ~(1<<LED_3);
		}
		else{
					
			PORTC |= (1<<LED_3);
			}
		}
		
		 // END loop infinito
} // END MAIN


//**********************************************************************
//Definición de funciónes
//**********************************************************************
//**********************************************************************
//initialize_ports : inicializa los puertos de entrada o salida
//***********************************************************************
void initialize_ports(void)
{
	//Entradas***************************************************************
	//Switch_1
	//DDRD = 0x7F; //0b01111111
	DDRD  &=~(1<<Switch_1);  // Declara solamente el bit 7 del DDRD como entrada
	//DDRD  &=~(1<<PIND2);
	PORTD |=(1<<Switch_1); // Activa la resistencia pull-up al poner la entrada
	// en 1 del bit 0 del puerto D
	
	//Switch_2
	DDRD  &=~(1<<Switch_2); // Declara solamente el bit 0 del DDRD como entrada
	PORTD |=(1<<Switch_2);//Activa la resistencia pull-up al poner la entrada
	// en 1 del bit 7 del puerto D
	
	//Salidas****************************************************************
	
	//LED:1 en el pin PINB0 como salida
	DDRB |= (1<<LED_1);
	//LED_1 se encontrara apagado el led con un 0
	PORTB &= ~(1<<LED_1);
	
	//LED_2 en el pin PINB4 como salida
	DDRB |= (1<<LED_2);
	//LED_2 se encontrara apagado el led con un 0
	PORTB &= ~(1<<LED_2);
	
	//LED_3 en el pin PINC0 como salida
	DDRC |= (1<<LED_3);
	//LED_3 se encontrara apagado el led con un 0
	PORTC &= ~(1<<LED_3);
}

